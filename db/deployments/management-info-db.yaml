apiVersion: v1
kind: ConfigMap
metadata:
  name: management-info-initdb-config
  namespace: management-controller
data:
  initdb.sql: |
    CREATE TABLE `instance_node_info` (
        `instance_node_id` INTEGER NOT NULL,
        `node_name` VARCHAR(255) NOT NULL,
        `node_ip` VARCHAR(255) NOT NULL,
        `node_status` ENUM('ready', 'not_ready', 'error') NOT NULL,
        PRIMARY KEY (instance_node_id)
    );
    
    CREATE TABLE `cluster_info` (
        `cluster_id` INTEGER NOT NULL,
        `cluster_name` VARCHAR(255) NOT NULL,
        `cluster_ip` VARCHAR(255) NOT NULL,
        PRIMARY KEY(cluster_id)
    );

    CREATE TABLE `node_info` (
        `node_id` INTEGER NOT NULL,
        `node_name` VARCHAR(255) NOT NULL,
        `node_ip` VARCHAR(255) NOT NULL,
        `node_status` ENUM('ready', 'not_ready', 'error') NOT NULL,
        `cluster_id` INTEGER NOT NULL,
        PRIMARY KEY (node_id),
        FOREIGN KEY (cluster_id) REFERENCES cluster_info(cluster_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

    CREATE TABLE `storage_info` (
        `storage_id` INTEGER NOT NULL,
        `storage_name` VARCHAR(255) NOT NULL,
        `storage_type` ENUM('csd', 'ssd') NOT NULL,
        `storage_capacity` float NOT NULL,
        `storage_status` ENUM('disk_error', 'disk_full', 'healthy', 'unknown') NOT NULL,
        `csd_type` ENUM('ngd', 'scaleflux', 'smart_ssd') NOT NULL,
        `csd_ip` VARCHAR(255) NOT NULL,
        `csd_port` VARCHAR(255) NOT NULL,
        `node_id` INTEGER NOT NULL,
        `cluster_id` INTEGER NOT NULL,
        PRIMARY KEY (storage_id),
        FOREIGN KEY (node_id) REFERENCES node_info(node_id) ON DELETE CASCADE ON UPDATE CASCADE, 
        FOREIGN KEY (cluster_id) REFERENCES cluster_info(cluster_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

    CREATE TABLE `storage_replica_info` (
        `storage_id` INTEGER NOT NULL,
        `replica_storage_id` INTEGER NOT NULL,
        PRIMARY KEY (storage_id, replica_storage_id),
        FOREIGN KEY (storage_id) REFERENCES storage_info(storage_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (replica_storage_id) REFERENCES storage_info(storage_id) ON DELETE CASCADE ON UPDATE CASCADE
    );
    
    CREATE TABLE `db_instance_info` (
      `db_instance_name` VARCHAR(255) NOT NULL,
      `instance_node_id` INTEGER NOT NULL,
      `instance_node_port` VARCHAR(255) NOT NULL,
      `storage_cluster_name` VARCHAR(255) NOT NULL,
      `db_name` VARCHAR(255) NOT NULL,
      `dbms_type` ENUM(
          'mysql',
          'tibero_db',
          'column_db',
          'approximate_db'
      ) NOT NULL,
      `data_store_type` ENUM('row', 'column') NOT NULL,
      `db_size` float NOT NULL,
      `csd_count` tinyint NOT NULL,
      `csd_type` ENUM('ngd', 'scaleflux', 'smart_ssd') NOT NULL,
      PRIMARY KEY (db_instance_name),
      FOREIGN KEY (instance_node_id) REFERENCES instance_node_info(instance_node_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

    CREATE TABLE `instance_storage_allocate_info` (
        `db_instance_name` VARCHAR(255) NOT NULL,
        `storage_id` INTEGER NOT NULL,
        PRIMARY KEY (db_instance_name, storage_id),
        FOREIGN KEY (db_instance_name) REFERENCES db_instance_info(db_instance_name) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (storage_id) REFERENCES storage_info(storage_id)
    );

    CREATE TABLE `db_instance_user` (
        `db_instance_name` VARCHAR(255) NOT NULL,
        `user_id` varchar(255) NOT NULL,
        PRIMARY KEY (db_instance_name, user_id),
        FOREIGN KEY (db_instance_name) REFERENCES db_instance_info(db_instance_name) ON DELETE CASCADE ON UPDATE CASCADE
    );

    INSERT INTO cluster_info values (1, "storage-cluster-A", "10.0.4.83");

    INSERT INTO node_info values (1, "storage-master", "10.0.4.83", "ready", 1);

    INSERT INTO
        storage_info
    values
        (
            1,
            "csd1",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.1.2",
            "8080",
            1,
            1
        ),
        (
            2,
            "csd2",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.2.2",
            "8080",
            1,
            1
        ),
        (
            3,
            "csd3",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.3.2",
            "8080",
            1,
            1
        ),
        (
            4,
            "csd4",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.4.2",
            "8080",
            1,
            1
        ),
        (
            5,
            "csd5",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.5.2",
            "8080",
            1,
            1
        ),
        (
            6,
            "csd6",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.6.2",
            "8080",
            1,
            1
        ),
        (
            7,
            "csd7",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.7.2",
            "8080",
            1,
            1
        ),
        (
            8,
            "csd8",
            "csd",
            200.0,
            "healthy",
            "ngd",
            "10.1.8.2",
            "8080",
            1,
            1
        );

    INSERT INTO
        instance_node_info
    values
        (
            1,
            "instance-worker",
            "10.0.4.80",
            "ready"
        );

    INSERT INTO
        db_instance_info
    values
        (
            "keti_opencsd",
            1,
            "30100",
            "storage-cluster-A",
            "tpc-h",
            "mysql",
            "row",
            200.0,
            8,
            "ngd"
        );

    INSERT INTO
        db_instance_user
    values
        ("keti_opencsd", "keti-opencsd-admin");

    INSERT INTO
        instance_storage_allocate_info
    values
        ("keti_opencsd", 1),
        ("keti_opencsd", 2),
        ("keti_opencsd", 3),
        ("keti_opencsd", 4),
        ("keti_opencsd", 5),
        ("keti_opencsd", 6),
        ("keti_opencsd", 7),
        ("keti_opencsd", 8);
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: management-info-db-pv
  namespace: management-controller
  labels:
    app: management-info-db
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  storageClassName: mysql-db
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: management-info-db-pvc
  namespace: management-controller
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: mysql-db
  selector:
    matchLabels:
      app: management-info-db
---
apiVersion: v1
kind: Service
metadata:
  name: management-info-db-svc
  namespace: management-controller
spec:
  type: NodePort
  ports:
    - port: 40704
      targetPort: 3306
      nodePort: 30704
  selector:
    app: management-info-db
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: management-info-db
  namespace: management-controller
spec:
  replicas: 1
  serviceName: management-info-db-svc
  selector:
    matchLabels:
      app: management-info-db
  template:
    metadata:
      labels:
        app: management-info-db
    spec:
      nodeSelector:
        key: master
      containers:
        - env:
            - name: MYSQL_DATABASE
              value: platform_info
            - name: MYSQL_PASSWORD
              value: ketilinux
            - name: MYSQL_ROOT_PASSWORD
              value: ketilinux
            - name: MYSQL_USER
              value: keti
          image: mysql:latest
          name: mysql
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - name: management-info-db-entrypoint
              mountPath: /docker-entrypoint-initdb.d
            - name: management-info-db
              mountPath: /var/lib/mysql
      volumes:
        - name: management-info-db-entrypoint
          configMap:
            name: management-info-initdb-config
            defaultMode: 0755
        - name: management-info-db
          persistentVolumeClaim:
            claimName: management-info-db-pvc